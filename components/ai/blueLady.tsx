/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.1.4 IronMan.glb
*/

import React, { useRef, useEffect, useState } from 'react';
import { useGLTF, useAnimations } from '@react-three/drei';
import { Group, Object3D, Material, SkinnedMesh } from 'three';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    _rootJoint: Object3D;
    Object_7: SkinnedMesh;
  };
  materials: {
    Character: Material;
  };
};

interface ModelProps {
  botState?: string;
  actions?: string[];
}

export default function BlueLadyModel(props: ModelProps) {
    const group = useRef<Group>(null);
    const { nodes, materials, animations } = useGLTF('/blueLady.glb') as GLTFResult;
    const { actions: animationActions } = useAnimations(animations, group);
    const [userState, setUserState] = useState<string>('idle');

    // set actions and pose when user interact
    useEffect(() => {
        const availableActions = props.actions?.map(actionName => animationActions[actionName])
            .filter(action => action !== null) || [];

        let currentTimeout: NodeJS.Timeout;

        const playRandomAction = () => {
            // Fade out current action if any
            availableActions.forEach(action => action?.fadeOut(0.5));
            
            // Pick and play random action
            const randomAction = availableActions[Math.floor(Math.random() * availableActions.length)];
            randomAction?.reset().fadeIn(0.5).play();

            // Schedule next action in 5-6 seconds
            const randomDuration = Math.floor(Math.random() * 1000) + 6000; 
            currentTimeout = setTimeout(playRandomAction, randomDuration);
        };

        // Start the animation cycle
        playRandomAction();

        // Cleanup on unmount
        return () => {
            if (currentTimeout) {
                clearTimeout(currentTimeout);
            }
            availableActions.forEach(action => action?.fadeOut(0.5));
        };
    }, [props.actions]);

    // use gltfjsx@6.1.4 to read local files glb then convert into component that are read by react-three-drei
    return (
        <group ref={group} {...props} dispose={null}>
            <group name="Sketchfab_Scene">
                <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]} scale={2.126}>
                    <group
                        name="Facial_&_Body_Animated_Party_F_0001_-_ActorCorefbx"
                        rotation={[Math.PI / 2, 0, 0]}
                        scale={0.01}>
                        <group name="Object_2">
                            <group name="RootNode">
                                <group name="Object_4">
                                    <primitive object={nodes._rootJoint} />
                                    <skinnedMesh
                                        name="Object_7"
                                        geometry={nodes.Object_7.geometry}
                                        material={materials.Character}
                                        skeleton={nodes.Object_7.skeleton}
                                        morphTargetDictionary={nodes.Object_7.morphTargetDictionary}
                                        morphTargetInfluences={nodes.Object_7.morphTargetInfluences}
                                    />
                                    <group name="Object_6" rotation={[-Math.PI / 2, 0, 0]} />
                                    <group name="blue" rotation={[-Math.PI / 2, 0, 0]} />
                                </group>
                            </group>
                        </group>
                    </group>
                </group>
            </group>
        </group>
    );
}

useGLTF.preload('/blueLady.glb');